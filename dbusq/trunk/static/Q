    constructor CreateForName(const connection: IDBusGConnection; name: UTF8String; pathName: UTF8String; interfaceName: UTF8String);
    constructor CreateForNameOwner(const connection: IDBusGConnection; name: UTF8String; pathName: UTF8String; interfaceName: UTF8String);
    constructor CreateFromProxy(const proxy: IDBusGProxy; pathName: UTF8String; interfaceName: UTF8String);
    constructor CreateForPeer(const connection: IDBusGConnection; pathName: UTF8String; interfaceName: UTF8String);
    procedure AddSignal(signalName: UTF8String; types: array of const); (* ????? FIXME *)
    
    procedure ConnectSignal(signalName: UTF8String; handler: TMethod); (*userdata, freee*)
    procedure DisconnectSignal(signalName: UTF8String; handler: TMethod);
    
    function Call(methodName: UTF8String; args: array of const): Boolean; (* raises exception *)
    procedure CallNoReply(methodName: UTF8String; args: array of const);
    
    function BeginCall(methodName: UTF8String; notify: data: destroy; args: array of const): IDBusGProxyCall;
    function EndCall(const call: IDBusGProxyCall; args: array of const{???}): Boolean; (* raises exception *)
    procedure CancelCall(const call: IDBusGProxyCall);
    
  protected
    
    procedure SetInterface(interfaceName: UTF8String); (* ????? FIXME *)
    function GetPath: UTF8String;
    function GetBusname: UTF8String;
    function GetInterface: UTF8String;
    
  published
    { dbus_g_method_return, dbus_g_method_return_error ? }
    
    property Path: UTF8String read GetPath;
    property Busname: UTF8String read GetBusname;
    property Interface: UTF8String read GetInterface write SetInterface; (* ugh. *)
