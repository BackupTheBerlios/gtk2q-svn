<?xml version="1.0" encoding="UTF-8" ?>

<node name="/com/example/MyObject">

  <interface name="com.example.MyObject">
    <annotation name="org.freedesktop.DBus.GLib.CSymbol" value="my_object"/>
    <method name="ManyArgs">
      <!-- This is optional, and in this case is redunundant -->
      <annotation name="org.freedesktop.DBus.GLib.CSymbol"
value="my_object_many_args"/>
      <arg type="u" name="x" direction="in" />
      <arg type="s" name="str" direction="in" />
      <arg type="d" name="trouble" direction="in" />
      <arg type="d" name="d_ret" direction="out" />
      <arg type="s" name="str_ret" direction="out" />
    </method>
  </interface>
</node>
 This XML is in the same format as the D-BUS introspection XML format.
Except we must include an "annotation" which give the C symbols
corresponding to the object implementation prefix (my_object). In addition,
if particular methods symbol names deviate from C convention (i.e. ManyArgs
->  many_args), you may specify an annotation giving the C symbol.

 Once you have written this XML, run dbus-binding-tool --mode=glib-server
FILENAME > HEADER_NAME. to generate a header file. For example:
dbus-binding-tool --mode=glib-server my-objet.xml > my-object-glue.h.

 Next, include the generated header in your program, and invoke
dbus_g_object_class_install_info, passing the object class and "object info"
included in the header. For example:

	dbus_g_object_type_install_info (COM_FOO_TYPE_MY_OBJECT,
&com_foo_my_object_info);
      
 This should be done exactly once per object class.

 To actually implement the method, just define a C function named e.g.
my_object_many_args in the same file as the info header is included. At the
moment, it is required that this function conform to the following rules:

    *

      The function must return a value of type gboolean; TRUE on success,
and FALSE otherwise.
    *

      The first parameter is a pointer to an instance of the object.
    *

      Following the object instance pointer are the method input values.
    *

      Following the input values are pointers to return values.
    *

      The final parameter must be a GError **. If the function returns FALSE
for an error, the error parameter must be initalized with g_set_error. 

Finally, you can export an object using dbus_g_connection_register_g_object.
For example:

	  dbus_g_connection_register_g_object (connection,
                                               "/com/foo/MyObject",
                                               obj);
      