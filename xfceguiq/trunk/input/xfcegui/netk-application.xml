<refentry id="libxfcegui4-NetkApplication">
<refmeta>
<refentrytitle>NetkApplication</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>LIBXFCEGUI4 Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>NetkApplication</refname><refpurpose>represents an application</refpurpose>
</refnamediv>

<refsynopsisdiv><title>Synopsis</title>

<synopsis>

#include &lt;libxfcegui4/libxfcegui4.h&gt;


struct      <link linkend="NetkApplication">NetkApplication</link>;
<link linkend="GType">GType</link>       <link linkend="netk-application-get-type">netk_application_get_type</link>       (void);
<link linkend="NetkApplication">NetkApplication</link>* <link linkend="netk-application-get">netk_application_get</link>       (<link linkend="gulong">gulong</link> xwindow);
<link linkend="gulong">gulong</link>      <link linkend="netk-application-get-xid">netk_application_get_xid</link>        (<link linkend="NetkApplication">NetkApplication</link> *app);
<link linkend="GList">GList</link>*      <link linkend="netk-application-get-windows">netk_application_get_windows</link>    (<link linkend="NetkApplication">NetkApplication</link> *app);
int         <link linkend="netk-application-get-n-windows">netk_application_get_n_windows</link>  (<link linkend="NetkApplication">NetkApplication</link> *app);
const char* <link linkend="netk-application-get-name">netk_application_get_name</link>       (<link linkend="NetkApplication">NetkApplication</link> *app);
const char* <link linkend="netk-application-get-icon-name">netk_application_get_icon_name</link>  (<link linkend="NetkApplication">NetkApplication</link> *app);
int         <link linkend="netk-application-get-pid">netk_application_get_pid</link>        (<link linkend="NetkApplication">NetkApplication</link> *app);
<link linkend="GdkPixbuf">GdkPixbuf</link>*  <link linkend="netk-application-get-icon">netk_application_get_icon</link>       (<link linkend="NetkApplication">NetkApplication</link> *app);
<link linkend="gboolean">gboolean</link>    <link linkend="netk-application-get-icon-is-fallback">netk_application_get_icon_is_fallback</link>
                                            (<link linkend="NetkApplication">NetkApplication</link> *app);
</synopsis>
</refsynopsisdiv>







<refsect1>
<title>Description</title>
<para>
<link linkend="NetkApplication">NetkApplication</link> represents an application (for the window manager)
</para>
</refsect1>

<refsect1>
<title>Details</title>
<refsect2>
<title><anchor id="NetkApplication"/>struct NetkApplication</title>
<programlisting>struct NetkApplication {

    GObject parent_instance;

    NetkApplicationPrivate *priv;
};
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="netk-application-get-type"/>netk_application_get_type ()</title>
<programlisting><link linkend="GType">GType</link>       netk_application_get_type       (void);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>the gtype for the NetkApplication class


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="netk-application-get"/>netk_application_get ()</title>
<programlisting><link linkend="NetkApplication">NetkApplication</link>* netk_application_get       (<link linkend="gulong">gulong</link> xwindow);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>xwindow</parameter>&nbsp;:</term>
<listitem><simpara>the X window id
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>the NetkApplication, or NULL


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="netk-application-get-xid"/>netk_application_get_xid ()</title>
<programlisting><link linkend="gulong">gulong</link>      netk_application_get_xid        (<link linkend="NetkApplication">NetkApplication</link> *app);</programlisting>
<para>
Gets the X id of the group leader window for the app.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>app</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="NetkApplication">NetkApplication</link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> X id for the app
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="netk-application-get-windows"/>netk_application_get_windows ()</title>
<programlisting><link linkend="GList">GList</link>*      netk_application_get_windows    (<link linkend="NetkApplication">NetkApplication</link> *app);</programlisting>
<para>
Gets a list of all windows belonging to <parameter>app</parameter>. The list
is returned by reference and should not be freed.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>app</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="NetkApplication">NetkApplication</link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> list of <link linkend="NetkWindow">NetkWindow</link> in this app
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="netk-application-get-n-windows"/>netk_application_get_n_windows ()</title>
<programlisting>int         netk_application_get_n_windows  (<link linkend="NetkApplication">NetkApplication</link> *app);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>app</parameter>&nbsp;:</term>
<listitem><simpara>the NetkApplication instance
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>number of windows, or 0 on failure


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="netk-application-get-name"/>netk_application_get_name ()</title>
<programlisting>const char* netk_application_get_name       (<link linkend="NetkApplication">NetkApplication</link> *app);</programlisting>
<para>
Gets the name of an application, employing various
suboptimal heuristics to try to figure it out.
Probably GTK should have a function to allow apps to
set _NET_WM_NAME on the group leader as the app name,
and the WM spec should say that's where the app name
goes.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>app</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="NetkApplication">NetkApplication</link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> name of the application
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="netk-application-get-icon-name"/>netk_application_get_icon_name ()</title>
<programlisting>const char* netk_application_get_icon_name  (<link linkend="NetkApplication">NetkApplication</link> *app);</programlisting>
<para>
Gets the icon name of an application, employing various
suboptimal heuristics to try to figure it out.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>app</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="NetkApplication">NetkApplication</link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> name of the application when minimized
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="netk-application-get-pid"/>netk_application_get_pid ()</title>
<programlisting>int         netk_application_get_pid        (<link linkend="NetkApplication">NetkApplication</link> *app);</programlisting>
<para>
Gets the process ID of an application, or 0 if none
is available.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>app</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="NetkApplication">NetkApplication</link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> process ID or 0
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="netk-application-get-icon"/>netk_application_get_icon ()</title>
<programlisting><link linkend="GdkPixbuf">GdkPixbuf</link>*  netk_application_get_icon       (<link linkend="NetkApplication">NetkApplication</link> *app);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>app</parameter>&nbsp;:</term>
<listitem><simpara>the NetkApplication instance
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>a pixbuf with the icon. its refcount is not touched. NULL on failure.

Either returns the icon of the NetkApplication, or, failing that, returns the icon of a window belonging to the application


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="netk-application-get-icon-is-fallback"/>netk_application_get_icon_is_fallback ()</title>
<programlisting><link linkend="gboolean">gboolean</link>    netk_application_get_icon_is_fallback
                                            (<link linkend="NetkApplication">NetkApplication</link> *app);</programlisting>
<para>
Checks if we are using a default fallback icon because
none was set on the application.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>app</parameter>&nbsp;:</term>
<listitem><simpara>the NetkApplication instance
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> <literal>TRUE</literal> if icon is a fallback
</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>




</refentry>
