unit {punit};

{comments}

interface
uses sysutils,ugtypes,uvarrectools,iugsignal,ugsignal,iug
{psuses}{piuses}{pauses}{ptypeuses}
;

(*$M+*) (* delphi RTTI *)

{pextraconsts}

type
  {pclass} = class({pancestorclass}{pinterfaces})
  protected
    {paddmembervars}
  protected
    #signal#
    FSignal{signalname}: {signalclass};
    FCreateLockSignal{signalname}: Integer;
    #/signal#
#constructable#
    procedure constructWrapped; override;
  public
    constructor Create; override;
#/constructable#
  public
    class procedure TypeRegister; override; (* flat *)
    class function OverrideGType: GType; override; (* 0: not *)

    #publicfunction#
    {pclassifier} function {pfunction}({pfunctionparams}): {preturn}; {poverrideornot}
    #/publicfunction#
    #publicprocedure#
    {pclassifier} procedure {pfunction}({pfunctionparams}); {poverrideornot}
    #/publicprocedure#

  protected
    #propertyread#
  protected
    FSignal{pprop}Changed: DPropertyChangedSignal;
    FCreateLockSignal{pprop}Changed: Integer;

    function Get{pprop}Property: {pproptype};
    function Get{pprop}ChangedSignal: DPropertyChangedSignal;
    #/propertyread#
    #propertywrite#
    procedure Set{pprop}Property(const value: {pproptype});
    #/propertywrite#
    #propertyreadboxed#
    function Get{pprop}Property: {pproptype};
    #/propertyreadboxed#
    #propertywriteboxed#
    procedure Set{pprop}Property(const value: {pproptype});
    #/propertywriteboxed#
  public
    #propertyunwrappedread#
    function Get{pprop}UnwrappedProperty: {pproputype};
    #/propertyunwrappedread#
    #propertyunwrappedwrite#
    procedure Set{pprop}UnwrappedProperty(const value: {pproputype});
    #/propertyunwrappedwrite#
  published
    #propertyreadonly#
  {propertyvisibility}
    property {pprop}: {pproptype} read Get{pprop}Property;
    #/propertyreadonly#
    #propertyreadwrite#
  {propertyvisibility}
    property {pprop}: {pproptype} read Get{pprop}Property write Set{pprop}Property; (* default {ppropdefault}; *)
    #/propertyreadwrite#
    #propertywriteonly#
  {propertyvisibility}
    property {pprop}: {pproptype} write Set{pprop}Property; (* default {ppropdefault}; *)
    #/propertywriteonly#
    #propertyunknown#
      (* {pprop} ({gprop}) [unknown] *)
    #/propertyunknown#
    #signal#
    function Get{signalname}Signal: {signalclass};
    property {signalname}: {signalclass} read Get{signalname}Signal;
    #/signal#
  public
    {pinterfaceaddlines}
    {paddfuncprototypes}
  end;

implementation
uses utyperegistry, uincdec{pimpuses};

(*$INCLUDE static/clinksettings.inc*)

{pexternfuncs}

{paddfuncs}

{includepgclassdef}

#constructable#
procedure {pclass}.constructWrapped;
begin
  setWrapped(PGObject({cclass1}_new({cclassparams})));
  {pextraconstructcode}
end;

constructor {pclass}.Create;
begin
  inherited Create;
end;

#/constructable#

#propertyread#
function {pclass}.Get{pprop}ChangedSignal: DPropertyChangedSignal;
begin
  if not Assigned(FSignal{pprop}Changed) then begin
    if InterlockedIncrement(FCreateLockSignal{pprop}Changed) = 1 then
      FSignal{pprop}Changed := DPropertyChangedSignal.Create(Self, 'notify::{gprop}');

    InterlockedDecrement(FCreateLockSignal{pprop}Changed);
  end;
  Result := FSignal{pprop}Changed;
end;

function {pclass}.Get{pprop}Property: {pproptype};
begin
  Result := {ppropinterfacecaststart}ObjectGet{proptype1}Property('{gprop}'){ppropinterfacecast};
end;
#/propertyread#

#propertywrite#
procedure {pclass}.Set{pprop}Property(const value: {pproptype});
begin
  ObjectSet{proptype1}Property('{gprop}', {proptype1cast}(value{ppropgenericcast}));
end;
#/propertywrite#

#propertyreadboxed#
function {pclass}.Get{pprop}Property: {pproptype};
begin
  g_object_get(Fobject, PGChar(PChar('{gprop}')), [@Result]);
end;
#/propertyreadboxed#

#propertywriteboxed#
procedure {pclass}.Set{pprop}Property(const value: {pproptype});
begin
  g_object_set(Fobject, PGChar(PChar('{gprop}')), [@value]);
end;
#/propertywriteboxed#

#propertyunwrappedread#
function {pclass}.Get{pprop}UnwrappedProperty: {pproputype};
begin
  Result := ObjectGetObjectUnwrappedProperty('{gprop}');
end;

#/propertyunwrappedread#

#propertyunwrappedwrite#
procedure {pclass}.Set{pprop}UnwrappedProperty(const value: {pproputype});
begin
  ObjectSetObjectUnwrappedProperty('{gprop}', value);
end;
#/propertyunwrappedwrite#

#publicfunctionstringreturnfromnewstring#
{pclassifier} function {pclass}.{pfunction}({pfunctionparams}): {preturn};
var (* fromnewstring *)
  aglist: {preturnitemrawtype};
begin
  aglist := {cfunction}({cfunctioncallparams});
  Result := PChar(aglist);
  {preturnlistfinalizer}
end;
#/publicfunctionstringreturnfromnewstring#

#publicfunctioninterfacereturncreate#
{pclassifier} function {pclass}.{pfunction}({pfunctionparams}): {preturn};
var
  itemraw: {preturnitemrawtype};
begin (* interfacereturncreate *)
  itemraw := {cfunction}({cfunctioncallparams});
  {preturnperitempreaction}
  Result := {preturnitemclassname}({wrapperexpectedtype}(itemraw)){preturnitemtypeas};
end;
#/publicfunctioninterfacereturncreate#

#publicfunctionarrayreturnfromlist#
{pclassifier} function {pclass}.{pfunction}({pfunctionparams}): {preturn};
var (* fromlist *)
  res: {preturn};
  aglist: PGList;
  caglist: PGList;
  itemraw: {preturnitemrawtype};
  i: Integer;
begin
  SetLength(res, 0);
  aglist := {cfunction}({cfunctioncallparams});

  if not Assigned(aglist) then begin
    Result := res;
    Exit;
  end;
  i := 0;
  SetLength(res, g_list_length(aglist));
  caglist := aglist;
  while Assigned(caglist) do begin
    itemraw := {preturnitemrawtype}(caglist^.data);
    {preturnperitempreaction}
    res[i] := {preturnitemclassname}({wrapperexpectedtype}(itemraw)){preturnitemtypeas}; 
    {pfreeforeachitem}
    Inc(i);
    caglist := g_list_next(caglist);
  end;
 
  {preturnlistfinalizer}
  Result := res;
end;
#/publicfunctionarrayreturnfromlist#

#publicfunctionarrayreturnfromstrv#
{pclassifier} function {pclass}.{pfunction}({pfunctionparams}): {preturn};
var (* fromlist *)
  res: {preturn};
  aglist: PPGChar;
  caglist: PPGChar;
  itemraw: {preturnitemrawtype};
  i: Integer;
begin
  SetLength(res, 0);
  aglist := {cfunction}({cfunctioncallparams});

  if not Assigned(aglist) then begin
    Result := res;
    Exit;
  end;

  i := 0;
  SetLength(res, g_strv_length(aglist));
  caglist := aglist;
  while Assigned(caglist) do begin
    itemraw := {preturnitemrawtype}(caglist^);
    {preturnperitempreaction}
    res[i] := {preturnitemclassname}({wrapperexpectedtype}(itemraw));
    {pfreeforeachitem}
    Inc(i);
    Inc(caglist);
  end;
 
  {preturnlistfinalizer}
  Result := res;
end;
#/publicfunctionarrayreturnfromstrv#

#publicfunctionarrayreturnfromcarray#
{pclassifier} function {pclass}.{pfunction}({pfunctionparams}): {preturn};
var (* fromcarray *)
  res: {preturn};
  aglist: PGtkAccelGroupEntry;
  caglist: PGtkAccelGroupEntry;
  itemraw: {preturnitemrawtype};
  i: Integer;
  cnt: guint;
begin
  SetLength(res, 0);
  aglist := {cfunction}({cfunctioncallparams});

  if not Assigned(aglist) then begin
    Result := res;
    Exit;
  end;

  SetLength(res, cnt);
  caglist := aglist;
  for i := 0 to cnt - 1 do begin
    itemraw := {preturnitemrawtype}(caglist^);
    {preturnperitempreaction}
    res[i] := {preturnitemclassname}({wrapperexpectedtype}(itemraw));
    {pfreeforeachitem}
    Inc(caglist);
  end;
 
  {preturnlistfinalizer}
  Result := res;
end;
#/publicfunctionarrayreturnfromcarray#

#publicfunctionarrayreturnfromslist#
{pclassifier} function {pclass}.{pfunction}({pfunctionparams}): {preturn};
var (* fromslist *)
  res: {preturn};
  aglist: PGSList;
  caglist: PGSList;
  itemraw: {preturnitemrawtype};
  i: Integer;
begin
  SetLength(res, 0);
  aglist := {cfunction}({cfunctioncallparams});

  if not Assigned(aglist) then begin
    Result := res;
    Exit;
  end;

  i := 0;
  SetLength(res, g_slist_length(aglist));
  caglist := aglist;
  while Assigned(caglist) do begin
    itemraw := {preturnitemrawtype}(caglist^.data);
    {preturnperitempreaction}
    res[i] := {preturnitemclassname}({wrapperexpectedtype}(itemraw)){preturnitemtypeas}; 
    {pfreeforeachitem}
    Inc(i);
    caglist := g_slist_next(caglist);
  end;
 
  {preturnlistfinalizer}
  Result := res;
end;
#/publicfunctionarrayreturnfromslist#

#publicfunctionwithouterror#
{pclassifier} function {pclass}.{pfunction}({pfunctionparams}): {preturn};
begin (* withoutgerror *)
  Result := {preturntransformer}({cfunction}({cfunctioncallparams}));
end;
#/publicfunctionwithouterror#
#publicprocedurewithouterror#
{pclassifier} procedure {pclass}.{pfunction}({pfunctionparams});
begin (* withouterror *)
  {cfunction}({cfunctioncallparams});
end;
#/publicprocedurewithouterror#
#publicfunctionwitherror#
{pclassifier} function {pclass}.{pfunction}({pfunctionparams}): {preturn};
var (* witherror *)
  error: PGError;
  err: EGError;
begin
  error := nil;
  Result := {preturn}({cfunction}({cfunctioncallparams}));
  if Result = {preturnerrorcode} then begin
    err := EGError.Create(error.domain, error.code, PChar(error.message));
    g_error_free(error);
    raise err;
  end;
end;
#/publicfunctionwitherror#
#publicprocedurewitherror#
unsupported (* procedurewitherror *)
#/publicprocedurewitherror#

class function {pclass}.OverrideGType: GType; (* 0: not *)
var
  gtypeinfo: PGTypeInfo;
  xclassname: UTF8String;
begin
  Result := 0;

  xclassname := ClassName;
  if xclassname <> '{pclass}' then begin (* derived *)
    if sizeof({gtypeclass}) = sizeof(Integer) then
      raise EClassFinalError.Create('Class {pclass} cannot be derived from!');

    gtypeinfo := DNewTypeInfo(sizeof({gtypeclass}));

    Result := g_type_register_static({cclass1type}, PGChar(PChar(xclassname)), gtypeinfo, 0); (* TODO abstract? *)
    assert(False); (* TODO *)
  end;
end;

class procedure {pclass}.TypeRegister;
begin
  inherited TypeRegister;
  DTypeRegister('{pclass}', '{namespace}', {pclass}, {cclass1type}, {pinterface});
end;

#signal#
function {pclass}.Get{signalname}Signal: {signalclass};
begin
  if not Assigned(FSignal{signalname}) then begin
    if InterlockedIncrement(FCreateLockSignal{signalname}) = 1 then
      FSignal{signalname} := {signalclass}.Create(Self, '{gsignalname}');

    InterlockedDecrement(FCreateLockSignal{signalname});
  end;
  Result := FSignal{signalname};
end;	
#/signal#

initialization
  DGlobalTypeRegisterLock;
  {pclass}.TypeRegister;
  DGlobalTypeRegisterUnlock;

end.
