{comments}

(*$IFDEF define_consts*)
{pextraconsts}
(*$ENDIF define_consts*)

(*$IFDEF define_types*)
  {signalintf}
  {pextratypes}
  {piclass} = interface({pancestorinterface})
    {guid}

    #publicfunction#
    {pclassifier} function {pfunction}({pfunctionparams}): {preturn};
    #/publicfunction#
    #publicprocedure#
    {pclassifier} procedure {pfunction}({pfunctionparams});
    #/publicprocedure#

    #propertyread#
    function Get{pprop}Property: {pproptype}; // n
    #/propertyread#
    #propertywrite#
    procedure Set{pprop}Property(const value: {pproptype}); // n
    #/propertywrite#
    #propertyreadboxed#
    function Get{pprop}Property: {pproptype}; // boxed
    #/propertyreadboxed#
    #propertywriteboxed#
    procedure Set{pprop}Property(const value: {pproptype}); // boxed
    #/propertywriteboxed#
    #propertyunwrapped#
    function Get{pprop}UnwrappedProperty: {pproputype};
    procedure Set{pprop}UnwrappedProperty(const value: {pproputype});
    #/propertyunwrapped#
    #propertyreadonly#
    property {pprop}: {pproptype} read get{pprop}Property;
    #/propertyreadonly#
    #propertyreadwrite#
    property {pprop}: {pproptype} read get{pprop}Property write set{pprop}Property; // default {ppropdefault};
    #/propertyreadwrite#
    #propertywriteonly#
    property {pprop}: {pproptype} write set{pprop}Property; // default {ppropdefault};
    #/propertywriteonly#
    #propertyunknown#
      // {pprop} ({gprop}) [unknown]
    #/propertyunknown#
    {pinterfaceaddlines}
    {paddfuncprototypes}

    #signal#
    function get{signalname}Signal: {signalclass};
    property {signalname}: {signalclass} read get{signalname}Signal;
    #/signal#
  end;
(*$ENDIF define_types*)

(*$IFDEF define_implementation*)

{signalimpl}

(*$ENDIF define_implementation*)
