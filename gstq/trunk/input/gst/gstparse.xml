<refentry id="gstreamer-GstParse">
<refmeta>
<refentrytitle>GstParse</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>GSTREAMER Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>GstParse</refname><refpurpose>get a pipeline from a text pipeline description</refpurpose>
</refnamediv>

<refsynopsisdiv><title>Synopsis</title>

<synopsis>

#include &lt;gst/gst.h&gt;


<link linkend="GQuark">GQuark</link>      <link linkend="gst-parse-error-quark">gst_parse_error_quark</link>           (void);
#define     <link linkend="GST-PARSE-ERROR-CAPS">GST_PARSE_ERROR</link>
enum        <link linkend="GstParseError">GstParseError</link>;
<link linkend="GstElement">GstElement</link>* <link linkend="gst-parse-launch">gst_parse_launch</link>                (const <link linkend="gchar">gchar</link> *pipeline_description,
                                             <link linkend="GError">GError</link> **error);
<link linkend="GstElement">GstElement</link>* <link linkend="gst-parse-launchv">gst_parse_launchv</link>               (const <link linkend="gchar">gchar</link> **argv,
                                             <link linkend="GError">GError</link> **error);


</synopsis>
</refsynopsisdiv>







<refsect1>
<title>Description</title>
<para>

</para>
</refsect1>

<refsect1>
<title>Details</title>
<refsect2>
<title><anchor id="gst-parse-error-quark"/>gst_parse_error_quark ()</title>
<programlisting><link linkend="GQuark">GQuark</link>      gst_parse_error_quark           (void);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="GST-PARSE-ERROR-CAPS"/>GST_PARSE_ERROR</title>
<programlisting>#define GST_PARSE_ERROR gst_parse_error_quark ()
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="GstParseError"/>enum GstParseError</title>
<programlisting>typedef enum
{
  GST_PARSE_ERROR_SYNTAX,
  GST_PARSE_ERROR_NO_SUCH_ELEMENT,
  GST_PARSE_ERROR_NO_SUCH_PROPERTY,
  GST_PARSE_ERROR_LINK,
  GST_PARSE_ERROR_COULD_NOT_SET_PROPERTY,
  GST_PARSE_ERROR_EMPTY_BIN,
  GST_PARSE_ERROR_EMPTY
} GstParseError;
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="gst-parse-launch"/>gst_parse_launch ()</title>
<programlisting><link linkend="GstElement">GstElement</link>* gst_parse_launch                (const <link linkend="gchar">gchar</link> *pipeline_description,
                                             <link linkend="GError">GError</link> **error);</programlisting>
<para>
Create a new pipeline based on command line syntax.
Please note that you might get a return value that is not NULL even though
the error is set. In this case there was a recoverable parsing error and you
can try to play the pipeline.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>pipeline_description</parameter>&nbsp;:</term>
<listitem><simpara> the command line describing the pipeline
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&nbsp;:</term>
<listitem><simpara> the error message in case of an erroneous pipeline.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> a new element on success, NULL on failure. If more than one toplevel
element is specified by the pipeline_description, all elements are put into
a <link linkend="GstPipeline">GstPipeline</link> ant that is returned.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gst-parse-launchv"/>gst_parse_launchv ()</title>
<programlisting><link linkend="GstElement">GstElement</link>* gst_parse_launchv               (const <link linkend="gchar">gchar</link> **argv,
                                             <link linkend="GError">GError</link> **error);</programlisting>
<para>
Create a new element based on command line syntax.
<link linkend="error">error</link> will contain an error message if an erroneuos pipeline is specified.
An error does not mean that the pipeline could not be constructed.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>argv</parameter>&nbsp;:</term>
<listitem><simpara> null-terminated array of arguments
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&nbsp;:</term>
<listitem><simpara> pointer to a <link linkend="GError">GError</link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> a new element on success and NULL on failure.
</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>




</refentry>
