<refentry id="GstPadTemplate">
<refmeta>
<refentrytitle>GstPadTemplate</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>GSTREAMER Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>GstPadTemplate</refname><refpurpose>Describe the media type of a pad.</refpurpose>
</refnamediv>

<refsynopsisdiv><title>Synopsis</title>

<synopsis>

#include &lt;gst/gst.h&gt;


struct      <link linkend="GstPadTemplate-struct">GstPadTemplate</link>;
struct      <link linkend="GstStaticPadTemplate">GstStaticPadTemplate</link>;
#define     <link linkend="GST-IS-PAD-FAST-CAPS">GST_IS_PAD_FAST</link>                 (obj)
#define     <link linkend="GST-PAD-TEMPLATE-NAME-TEMPLATE-CAPS">GST_PAD_TEMPLATE_NAME_TEMPLATE</link>  (templ)
#define     <link linkend="GST-PAD-TEMPLATE-DIRECTION-CAPS">GST_PAD_TEMPLATE_DIRECTION</link>      (templ)
#define     <link linkend="GST-PAD-TEMPLATE-PRESENCE-CAPS">GST_PAD_TEMPLATE_PRESENCE</link>       (templ)
#define     <link linkend="GST-PAD-TEMPLATE-CAPS-CAPS">GST_PAD_TEMPLATE_CAPS</link>           (templ)
#define     <link linkend="GST-PAD-TEMPLATE-IS-FIXED-CAPS">GST_PAD_TEMPLATE_IS_FIXED</link>       (templ)
enum        <link linkend="GstPadTemplateFlags">GstPadTemplateFlags</link>;
<link linkend="GstPadTemplate">GstPadTemplate</link>* <link linkend="gst-pad-template-new">gst_pad_template_new</link>        (const <link linkend="gchar">gchar</link> *name_template,
                                             <link linkend="GstPadDirection">GstPadDirection</link> direction,
                                             <link linkend="GstPadPresence">GstPadPresence</link> presence,
                                             <link linkend="GstCaps">GstCaps</link> *caps);
<link linkend="GstPadTemplate">GstPadTemplate</link>* <link linkend="gst-static-pad-template-get">gst_static_pad_template_get</link> (<link linkend="GstStaticPadTemplate">GstStaticPadTemplate</link> *pad_template);
<link linkend="GstCaps">GstCaps</link>*    <link linkend="gst-pad-template-get-caps">gst_pad_template_get_caps</link>       (<link linkend="GstPadTemplate">GstPadTemplate</link> *templ);


</synopsis>
</refsynopsisdiv>

<refsect1>
<title>Object Hierarchy</title>
<synopsis>

  <link linkend="GObject">GObject</link>
   +----<link linkend="GstObject">GstObject</link>
         +----GstPadTemplate
</synopsis>

</refsect1>




<refsect1>
<title>Signal Prototypes</title>
<synopsis>

&quot;<link linkend="GstPadTemplate-pad-created">pad-created</link>&quot;
            void        user_function      (<link linkend="GstPadTemplate">GstPadTemplate</link> *gstpadtemplate,
                                            <link linkend="GstPad">GstPad</link> *arg1,
                                            <link linkend="gpointer">gpointer</link> user_data);
</synopsis>
</refsect1>


<refsect1>
<title>Description</title>
<para>
Padtemplates describe the possible media types a pad or an elementfactory can
handle. 
</para>
<para>
Pad and PadTemplates have <link linkend="GstCaps">GstCaps</link> attached to it to describe the media type they
are capable of dealing with.  <link linkend="gst-pad-template-get-caps">gst_pad_template_get_caps</link>() is used to get the
caps of a padtemplate. It's not possible to modify the caps of a padtemplate after
creation. 
</para>
<para>
Padtemplates can be created with <link linkend="gst-pad-template-new">gst_pad_template_new</link>() or with the convenient
<link linkend="GST-PAD-TEMPLATE-FACTORY-CAPS">GST_PAD_TEMPLATE_FACTORY</link>() macro. A padtemplate can be used to create a pad or 
to add to an elementfactory.
</para>
<para>
The following code example shows the code to create a pad from a padtemplate.
<example>
<title>Create a pad from a padtemplate</title>
  <programlisting>
  GstStaticPadTemplate my_template =
  GST_STATIC_PAD_TEMPLATE (
    "sink",		/* the name of the pad */
    GST_PAD_SINK,	/* the direction of the pad */
    GST_PAD_ALWAYS, 	/* when this pad will be present */
    GST_STATIC_CAPS (	/* the capabilities of the padtemplate */
      "audio/x-raw-int, "
        "channels = (int) [ 1, 6 ]"
    )
  )

  void
  my_method (void) 
  {
    GstPad *pad;
  
    pad = gst_pad_new_from_template (GST_PAD_TEMPLATE_GET (my_template_factory), "sink");
    ...
  }
  </programlisting>
</example>
</para>
<para>
The following example shows you how to add the padtemplate to an elementfactory:
<programlisting>
  gboolean
  my_factory_init (GstPlugin *plugin)
  {
    GstElementFactory *factory;

    factory = gst_element_factory_new ("my_factory", GST_TYPE_MYFACTORY, &amp;gst_myfactory_details);
    g_return_val_if_fail (factory != NULL, FALSE);

    gst_element_factory_add_pad_template (factory, GST_PAD_TEMPLATE_GET (my_template_factory));

    gst_plugin_add_feature (plugin, GST_PLUGIN_FEATURE (factory));

    return TRUE;
  }

</programlisting>
</para>
</refsect1>

<refsect1>
<title>Details</title>
<refsect2>
<title><anchor id="GstPadTemplate-struct"/>struct GstPadTemplate</title>
<programlisting>struct GstPadTemplate;</programlisting>
<para>
The padtemplate object.
</para></refsect2>
<refsect2>
<title><anchor id="GstStaticPadTemplate"/>struct GstStaticPadTemplate</title>
<programlisting>struct GstStaticPadTemplate {

  gchar           *name_template;
  GstPadDirection  direction;
  GstPadPresence   presence;
  GstStaticCaps   static_caps;
};
</programlisting>
<para>

</para></refsect2>
<refsect2>
<title><anchor id="GST-IS-PAD-FAST-CAPS"/>GST_IS_PAD_FAST()</title>
<programlisting>#define GST_IS_PAD_FAST(obj)		(G_OBJECT_TYPE(obj) == GST_TYPE_PAD) /* necessary? */
</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>obj</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="GST-PAD-TEMPLATE-NAME-TEMPLATE-CAPS"/>GST_PAD_TEMPLATE_NAME_TEMPLATE()</title>
<programlisting>#define GST_PAD_TEMPLATE_NAME_TEMPLATE(templ)	(((GstPadTemplate *)(templ))-&gt;name_template)
</programlisting>
<para>
Get the nametemplate of the padtemplate.
</para><variablelist role="params">
<varlistentry><term><parameter>templ</parameter>&nbsp;:</term>
<listitem><simpara>the template to query


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="GST-PAD-TEMPLATE-DIRECTION-CAPS"/>GST_PAD_TEMPLATE_DIRECTION()</title>
<programlisting>#define GST_PAD_TEMPLATE_DIRECTION(templ)	(((GstPadTemplate *)(templ))-&gt;direction)
</programlisting>
<para>
Get the direction of the padtemplate.
</para><variablelist role="params">
<varlistentry><term><parameter>templ</parameter>&nbsp;:</term>
<listitem><simpara>the template to query


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="GST-PAD-TEMPLATE-PRESENCE-CAPS"/>GST_PAD_TEMPLATE_PRESENCE()</title>
<programlisting>#define GST_PAD_TEMPLATE_PRESENCE(templ)	(((GstPadTemplate *)(templ))-&gt;presence)
</programlisting>
<para>
Get the presence of the padtemplate.
</para><variablelist role="params">
<varlistentry><term><parameter>templ</parameter>&nbsp;:</term>
<listitem><simpara>the template to query


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="GST-PAD-TEMPLATE-CAPS-CAPS"/>GST_PAD_TEMPLATE_CAPS()</title>
<programlisting>#define GST_PAD_TEMPLATE_CAPS(templ)		(((GstPadTemplate *)(templ))-&gt;caps)
</programlisting>
<para>
Get a handle to the padtemplate <link linkend="GstCaps">GstCaps</link>
</para><variablelist role="params">
<varlistentry><term><parameter>templ</parameter>&nbsp;:</term>
<listitem><simpara>the template to query


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="GST-PAD-TEMPLATE-IS-FIXED-CAPS"/>GST_PAD_TEMPLATE_IS_FIXED()</title>
<programlisting>#define GST_PAD_TEMPLATE_IS_FIXED(templ)	(GST_FLAG_IS_SET(templ, GST_PAD_TEMPLATE_FIXED))
</programlisting>
<para>
Check if the properties of the padtemplate are fixed
</para><variablelist role="params">
<varlistentry><term><parameter>templ</parameter>&nbsp;:</term>
<listitem><simpara>the template to query


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="GstPadTemplateFlags"/>enum GstPadTemplateFlags</title>
<programlisting>typedef enum {
  GST_PAD_TEMPLATE_FIXED	= GST_OBJECT_FLAG_LAST,

  GST_PAD_TEMPLATE_FLAG_LAST	= GST_OBJECT_FLAG_LAST + 4
} GstPadTemplateFlags;
</programlisting>
<para>
Flags for the padtemplate
</para><variablelist role="enum">
<varlistentry>
<term><literal>GST_PAD_TEMPLATE_FIXED</literal></term>
<listitem><simpara>the padtemplate has no variable properties
</simpara></listitem>
</varlistentry>
<varlistentry>
<term><literal>GST_PAD_TEMPLATE_FLAG_LAST</literal></term>
<listitem><simpara>first flag that can be used by subclasses.

</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gst-pad-template-new"/>gst_pad_template_new ()</title>
<programlisting><link linkend="GstPadTemplate">GstPadTemplate</link>* gst_pad_template_new        (const <link linkend="gchar">gchar</link> *name_template,
                                             <link linkend="GstPadDirection">GstPadDirection</link> direction,
                                             <link linkend="GstPadPresence">GstPadPresence</link> presence,
                                             <link linkend="GstCaps">GstCaps</link> *caps);</programlisting>
<para>
Creates a new pad template with a name according to the given template
and with the given arguments. This functions takes ownership of the provided
caps, so be sure to not use them afterwards.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>name_template</parameter>&nbsp;:</term>
<listitem><simpara> the name template.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>direction</parameter>&nbsp;:</term>
<listitem><simpara> the <link linkend="GstPadDirection">GstPadDirection</link> of the template.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>presence</parameter>&nbsp;:</term>
<listitem><simpara> the <link linkend="GstPadPresence">GstPadPresence</link> of the pad.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>caps</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GstCaps">GstCaps</link> set for the template. The caps are taken ownership of.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> a new <link linkend="GstPadTemplate">GstPadTemplate</link>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gst-static-pad-template-get"/>gst_static_pad_template_get ()</title>
<programlisting><link linkend="GstPadTemplate">GstPadTemplate</link>* gst_static_pad_template_get (<link linkend="GstStaticPadTemplate">GstStaticPadTemplate</link> *pad_template);</programlisting>
<para>
Converts a <link linkend="GstStaticPadTemplate">GstStaticPadTemplate</link> into a <link linkend="GstPadTemplate">GstPadTemplate</link>.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>pad_template</parameter>&nbsp;:</term>
<listitem><simpara> the static pad template
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> a new <link linkend="GstPadTemplate">GstPadTemplate</link>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2>
<title><anchor id="gst-pad-template-get-caps"/>gst_pad_template_get_caps ()</title>
<programlisting><link linkend="GstCaps">GstCaps</link>*    gst_pad_template_get_caps       (<link linkend="GstPadTemplate">GstPadTemplate</link> *templ);</programlisting>
<para>
Gets the capabilities of the pad template.</para>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>templ</parameter>&nbsp;:</term>
<listitem><simpara> a <link linkend="GstPadTemplate">GstPadTemplate</link> to get capabilities of.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis> :</term><listitem><simpara> the <link linkend="GstCaps">GstCaps</link> of the pad template. If you need to keep a reference to
the caps, take a ref (see <link linkend="gst-caps-ref">gst_caps_ref</link>()).
</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>

<refsect1>
<title>Signals</title>
<refsect2><title><anchor id="GstPadTemplate-pad-created"/>The &quot;pad-created&quot; signal</title>
<programlisting>void        user_function                  (<link linkend="GstPadTemplate">GstPadTemplate</link> *gstpadtemplate,
                                            <link linkend="GstPad">GstPad</link> *arg1,
                                            <link linkend="gpointer">gpointer</link> user_data);</programlisting>
<para>
This signal is fired when an element creates a pad from this 
template.
</para><variablelist role="params">
<varlistentry><term><parameter>gstpadtemplate</parameter>&nbsp;:</term>
<listitem><simpara>the object which received the signal.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>arg1</parameter>&nbsp;:</term>
<listitem><simpara>The pad that was created.

</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2>
</refsect1>


<refsect1>
<title>See Also</title>
<para>
<link linkend="GstPad">GstPad</link>, <link linkend="GstElementFactory">GstElementFactory</link>
</para>
</refsect1>

</refentry>
